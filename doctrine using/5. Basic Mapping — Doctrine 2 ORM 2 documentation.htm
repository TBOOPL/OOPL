<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
    
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title>5. Basic Mapping — Doctrine 2 ORM 2 documentation</title>
    <link rel="stylesheet" href="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/bootstrap.css" type="text/css">
    <link rel="stylesheet" href="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/default.css" type="text/css">
    <link rel="stylesheet" href="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/pygments.css" type="text/css">
    <link rel="stylesheet" href="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/layout.css" type="text/css">
    <link rel="stylesheet" href="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/configurationblock.css" type="text/css">
    <script src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '2',
        COLLAPSE_MODINDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>

    <script type="text/javascript" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/jquery.js"></script>
    <script type="text/javascript" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/configurationblock.js"></script>
    <script type="text/javascript" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/underscore.js"></script>
    <script type="text/javascript" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/configurationblock.js"></script>
    <script type="text/javascript" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/doctools.js"></script>
    <script type="text/javascript" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/configurationblock.js"></script>
    <script src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/bootstrap.js"></script>

    <script type="text/javascript">
    <!--
        $(document).ready(function() {
            $("#versions").change(function() {
                var docsUrl = $(this).val();
                window.location.href = docsUrl;
            });
        });
    -->
    </script>
    <link rel="shortcut icon" href="http://doctrine-orm.readthedocs.org/en/latest/_static/doctrine.ico">
    <link rel="top" title="Doctrine 2 ORM 2 documentation" href="http://doctrine-orm.readthedocs.org/en/latest/index.html">
    <link rel="next" title="6. Association Mapping" href="http://doctrine-orm.readthedocs.org/en/latest/reference/association-mapping.html">
    <link rel="prev" title="4. Frequently Asked Questions" href="http://doctrine-orm.readthedocs.org/en/latest/reference/faq.html">
 
<!-- RTD Extra Head -->



<!-- 
Read the Docs is acting as the canonical URL for your project. 
If you want to change it, more info is available in our docs:
  http://docs.readthedocs.org/en/latest/canonical.html
-->
<link rel="canonical" href="http://doctrine-orm.readthedocs.org/en/latest/reference/basic-mapping.html">

<script type="text/javascript">
  // This is included here because other places don't have access to the pagename variable.
  var READTHEDOCS_DATA = {
    project: "doctrine-orm",
    version: "latest",
    language: "en",
    page: "reference/basic-mapping",
    builder: "sphinx",
    theme: "doctrine",
    docroot: "/docs/en/",
    source_suffix: ".rst",
    api_host: "https://readthedocs.org",
    commit: "193e31f22a1155d9028d7bb8d4a27c9869e303f4"
  }
  // Old variables
  var doc_version = "latest";
  var doc_slug = "doctrine-orm";
  var page_name = "reference/basic-mapping";
  var html_theme = "doctrine";
</script>
<!-- RTD Analytics Code -->
<!-- Included in the header because you don't have a footer block. -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17997319-1']);
  _gaq.push(['_trackPageview']);


  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
<!-- end RTD Analytics Code -->
<!-- end RTD <extrahead> -->

  </head>
  <body>
    <div id="wrapper">
      <div id="header">
        <h1 id="h1title"></h1>
        <div id="logo">
          <a href="http://www.doctrine-project.org/">Doctrine - PHP Database Libraries</a>
        </div>
      </div>
      <div id="nav" class="cls">
        <div class="tl cls">
          <ul>
            <li><a target="_top" href="http://doctrine-orm.readthedocs.org/">home</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/about">about</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/projects.html">projects</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/projects/orm">orm</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/projects/dbal">dbal</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/blog">blog</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/jira">development</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/contribute">contribute</a></li>
            <li><a class="" target="_top" href="http://www.doctrine-project.org/community">community</a></li>
          </ul>
        </div>
      </div>
      <div id="content" class="cls">
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="http://doctrine-orm.readthedocs.org/en/latest/genindex.html" title="General Index" accesskey="I">index</a></li>
        <li class="right">
          <a href="http://doctrine-orm.readthedocs.org/en/latest/reference/association-mapping.html" title="6. Association Mapping" accesskey="N">next</a> |</li>
        <li class="right">
          <a href="http://doctrine-orm.readthedocs.org/en/latest/reference/faq.html" title="4. Frequently Asked Questions" accesskey="P">previous</a> |</li>
        <li><a href="http://doctrine-orm.readthedocs.org/">Doctrine Homepage</a> »</li>
        <li><a href="http://doctrine-orm.readthedocs.org/en/latest/index.html">Doctrine 2 ORM 2 documentation</a> »</li> 
      </ul>
    </div>  

        <div class="document">
            <div class="documentwrapper">
                <div class="bodywrapper">

              <div class="body">
                
  <div class="section" id="basic-mapping">
<h1>5. Basic Mapping<a class="headerlink" href="#basic-mapping" title="Permalink to this headline">¶</a></h1>
<p>This guide explains the basic mapping of entities and properties.
After working through this guide you should know:</p>
<ul class="simple">
<li>How to create PHP objects that can be saved to the database with Doctrine;</li>
<li>How to configure the mapping between columns on tables and properties on
entities;</li>
<li>What Doctrine mapping types are;</li>
<li>Defining primary keys and how identifiers are generated by Doctrine;</li>
<li>How quoting of reserved symbols works in Doctrine.</li>
</ul>
<p>Mapping of associations will be covered in the next chapter on
<a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/reference/association-mapping.html"><em>Association Mapping</em></a>.</p>
<div class="section" id="guide-assumptions">
<h2>5.1. Guide Assumptions<a class="headerlink" href="#guide-assumptions" title="Permalink to this headline">¶</a></h2>
<p>You should have already <a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/reference/configuration.html"><em>installed and configure</em></a>
Doctrine.</p>
</div>
<div class="section" id="creating-classes-for-the-database">
<h2>5.2. Creating Classes for the Database<a class="headerlink" href="#creating-classes-for-the-database" title="Permalink to this headline">¶</a></h2>
<p>Every PHP object that you want to save in the database using Doctrine
is called an “Entity”. The term “Entity” describes objects
that have an identity over many independent requests. This identity is
usually achieved by assigning a unique identifier to an entity.
In this tutorial the following <tt class="docutils literal"><span class="pre">Message</span></tt> PHP class will serve as the
example Entity:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$text</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$postedAt</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Because Doctrine is a generic library, it only knows about your
entities because you will describe their existence and structure using
mapping metadata, which is configuration that tells Doctrine how your
entity should be stored in the database. The documentation will often
speak of “mapping something”, which means writing the mapping metadata
that describes your entity.</p>
<p>Doctrine provides several different ways to specify object-relational
mapping metadata:</p>
<ul class="simple">
<li><a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/reference/annotations-reference.html"><em>Docblock Annotations</em></a></li>
<li><a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/reference/xml-mapping.html"><em>XML</em></a></li>
<li><a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/reference/yaml-mapping.html"><em>YAML</em></a></li>
<li><a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/reference/php-mapping.html"><em>PHP code</em></a></li>
</ul>
<p>This manual will usually show mapping metadata via docblock annotations, though
many examples also show the equivalent configuration in YAML and XML.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">All metadata drivers perform equally. Once the metadata of a class has been
read from the source (annotations, xml or yaml) it is stored in an instance
of the <tt class="docutils literal"><span class="pre">Doctrine\ORM\Mapping\ClassMetadata</span></tt> class and these instances are
stored in the metadata cache.  If you’re not using a metadata cache (not
recommended!) then the XML driver is the fastest.</p>
</div>
<p>Marking our <tt class="docutils literal"><span class="pre">Message</span></tt> class as an entity for Doctrine is straightforward:</p>
<div class="configuration-block jsactive clearfix">
<ul style="height: 175px;" class="simple">
<li class="selected"><em><a href="#"></a><a href="#"></a><a href="#">PHP</a></em><div style="display: block; width: 800px;" class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="sd">/** @Entity */</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">XML</a></em><div style="display: none; width: 800px;" class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;doctrine-mapping&gt;</span>
  <span class="nt">&lt;entity</span> <span class="na">name=</span><span class="s">"Message"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/entity&gt;</span>
<span class="nt">&lt;/doctrine-mapping&gt;</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">YAML</a></em><div style="display: none; width: 800px;" class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Message</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
  <span class="c1"># ...</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p>With no additional information, Doctrine expects the entity to be saved
into a table with the same name as the class in our case <tt class="docutils literal"><span class="pre">Message</span></tt>.
You can change this by configuring information about the table:</p>
<div class="configuration-block jsactive clearfix">
<ul style="height: 227px;" class="simple">
<li class="selected"><em><a href="#"></a><a href="#"></a><a href="#">PHP</a></em><div style="display: block; width: 800px;" class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @Entity</span>
<span class="sd"> * @Table(name="message")</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">XML</a></em><div style="display: none; width: 800px;" class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;doctrine-mapping&gt;</span>
  <span class="nt">&lt;entity</span> <span class="na">name=</span><span class="s">"Message"</span> <span class="na">table=</span><span class="s">"message"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/entity&gt;</span>
<span class="nt">&lt;/doctrine-mapping&gt;</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">YAML</a></em><div style="display: none; width: 800px;" class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Message</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
  <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">message</span>
  <span class="c1"># ...</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p>Now the class <tt class="docutils literal"><span class="pre">Message</span></tt> will be saved and fetched from the table <tt class="docutils literal"><span class="pre">message</span></tt>.</p>
</div>
<div class="section" id="property-mapping">
<h2>5.3. Property Mapping<a class="headerlink" href="#property-mapping" title="Permalink to this headline">¶</a></h2>
<p>The next step after marking a PHP class as an entity is mapping its properties
to columns in a table.</p>
<p>To configure a property use the <tt class="docutils literal"><span class="pre">@Column</span></tt> docblock annotation. The <tt class="docutils literal"><span class="pre">type</span></tt>
attribute specifies the <a class="reference internal" href="#reference-mapping-types"><em>Doctrine Mapping Type</em></a>
to use for the field. If the type is not specified, <tt class="docutils literal"><span class="pre">string</span></tt> is used as the
default.</p>
<div class="configuration-block jsactive clearfix">
<ul style="height: 261px;" class="simple">
<li class="selected"><em><a href="#"></a><a href="#"></a><a href="#">PHP</a></em><div style="display: block; width: 800px;" class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="sd">/** @Entity */</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>
    <span class="sd">/** @Column(type="integer") */</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
    <span class="sd">/** @Column(length=140) */</span>
    <span class="k">private</span> <span class="nv">$text</span><span class="p">;</span>
    <span class="sd">/** @Column(type="datetime", name="posted_at") */</span>
    <span class="k">private</span> <span class="nv">$postedAt</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">XML</a></em><div style="display: none; width: 800px;" class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;doctrine-mapping&gt;</span>
  <span class="nt">&lt;entity</span> <span class="na">name=</span><span class="s">"Message"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">type=</span><span class="s">"integer"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">"text"</span> <span class="na">length=</span><span class="s">"140"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">"postedAt"</span> <span class="na">column=</span><span class="s">"posted_at"</span> <span class="na">type=</span><span class="s">"datetime"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/entity&gt;</span>
<span class="nt">&lt;/doctrine-mapping&gt;</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">YAML</a></em><div style="display: none; width: 800px;" class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Message</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
  <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">integer</span>
    <span class="l-Scalar-Plain">text</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">length</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">140</span>
    <span class="l-Scalar-Plain">postedAt</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">datetime</span>
      <span class="l-Scalar-Plain">column</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">posted_at</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p>When we don’t explicitly specify a column name via the <tt class="docutils literal"><span class="pre">name</span></tt> option, Doctrine
assumes the field name is also the column name. This means that:</p>
<ul class="simple">
<li>the <tt class="docutils literal"><span class="pre">id</span></tt> property will map to the column <tt class="docutils literal"><span class="pre">id</span></tt> using the type <tt class="docutils literal"><span class="pre">integer</span></tt>;</li>
<li>the <tt class="docutils literal"><span class="pre">text</span></tt> property will map to the column <tt class="docutils literal"><span class="pre">text</span></tt> with the default mapping type <tt class="docutils literal"><span class="pre">string</span></tt>;</li>
<li>the <tt class="docutils literal"><span class="pre">postedAt</span></tt> property will map to the <tt class="docutils literal"><span class="pre">posted_at</span></tt> column with the <tt class="docutils literal"><span class="pre">datetime</span></tt> type.</li>
</ul>
<p>The Column annotation has some more attributes. Here is a complete
list:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">type</span></tt>: (optional, defaults to ‘string’) The mapping type to
use for the column.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt>: (optional, defaults to field name) The name of the
column in the database.</li>
<li><tt class="docutils literal"><span class="pre">length</span></tt>: (optional, default 255) The length of the column in
the database. (Applies only if a string-valued column is used).</li>
<li><tt class="docutils literal"><span class="pre">unique</span></tt>: (optional, default FALSE) Whether the column is a
unique key.</li>
<li><tt class="docutils literal"><span class="pre">nullable</span></tt>: (optional, default FALSE) Whether the database
column is nullable.</li>
<li><tt class="docutils literal"><span class="pre">precision</span></tt>: (optional, default 0) The precision for a decimal
(exact numeric) column (applies only for decimal column),
which is the maximum number of digits that are stored for the values.</li>
<li><tt class="docutils literal"><span class="pre">scale</span></tt>: (optional, default 0) The scale for a decimal (exact
numeric) column (applies only for decimal column), which represents
the number of digits to the right of the decimal point and must
not be greater than <em>precision</em>.</li>
<li><tt class="docutils literal"><span class="pre">columnDefinition</span></tt>: (optional) Allows to define a custom
DDL snippet that is used to create the column. Warning: This normally
confuses the SchemaTool to always detect the column as changed.</li>
<li><tt class="docutils literal"><span class="pre">options</span></tt>: (optional) Key-value pairs of options that get passed
to the underlying database platform when generating DDL statements.</li>
</ul>
</div>
<div class="section" id="doctrine-mapping-types">
<span id="reference-mapping-types"></span><h2>5.4. Doctrine Mapping Types<a class="headerlink" href="#doctrine-mapping-types" title="Permalink to this headline">¶</a></h2>
<p>The <tt class="docutils literal"><span class="pre">type</span></tt> option used in the <tt class="docutils literal"><span class="pre">@Column</span></tt> accepts any of the existing
Doctrine types or even your own custom types. A Doctrine type defines
the conversion between PHP and SQL types, independent from the database vendor
you are using. All Mapping Types that ship with Doctrine are fully portable
between the supported database systems.</p>
<p>As an example, the Doctrine Mapping Type <tt class="docutils literal"><span class="pre">string</span></tt> defines the
mapping from a PHP string to a SQL VARCHAR (or VARCHAR2 etc.
depending on the RDBMS brand). Here is a quick overview of the
built-in mapping types:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">string</span></tt>: Type that maps a SQL VARCHAR to a PHP string.</li>
<li><tt class="docutils literal"><span class="pre">integer</span></tt>: Type that maps a SQL INT to a PHP integer.</li>
<li><tt class="docutils literal"><span class="pre">smallint</span></tt>: Type that maps a database SMALLINT to a PHP
integer.</li>
<li><tt class="docutils literal"><span class="pre">bigint</span></tt>: Type that maps a database BIGINT to a PHP string.</li>
<li><tt class="docutils literal"><span class="pre">boolean</span></tt>: Type that maps a SQL boolean or equivalent (TINYINT) to a PHP boolean.</li>
<li><tt class="docutils literal"><span class="pre">decimal</span></tt>: Type that maps a SQL DECIMAL to a PHP string.</li>
<li><tt class="docutils literal"><span class="pre">date</span></tt>: Type that maps a SQL DATETIME to a PHP DateTime
object.</li>
<li><tt class="docutils literal"><span class="pre">time</span></tt>: Type that maps a SQL TIME to a PHP DateTime object.</li>
<li><tt class="docutils literal"><span class="pre">datetime</span></tt>: Type that maps a SQL DATETIME/TIMESTAMP to a PHP
DateTime object.</li>
<li><tt class="docutils literal"><span class="pre">datetimetz</span></tt>: Type that maps a SQL DATETIME/TIMESTAMP to a PHP
DateTime object with timezone.</li>
<li><tt class="docutils literal"><span class="pre">text</span></tt>: Type that maps a SQL CLOB to a PHP string.</li>
<li><tt class="docutils literal"><span class="pre">object</span></tt>: Type that maps a SQL CLOB to a PHP object using
<tt class="docutils literal"><span class="pre">serialize()</span></tt> and <tt class="docutils literal"><span class="pre">unserialize()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">array</span></tt>: Type that maps a SQL CLOB to a PHP array using
<tt class="docutils literal"><span class="pre">serialize()</span></tt> and <tt class="docutils literal"><span class="pre">unserialize()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">simple_array</span></tt>: Type that maps a SQL CLOB to a PHP array using
<tt class="docutils literal"><span class="pre">implode()</span></tt> and <tt class="docutils literal"><span class="pre">explode()</span></tt>, with a comma as delimiter. <em>IMPORTANT</em>
Only use this type if you are sure that your values cannot contain a ”,”.</li>
<li><tt class="docutils literal"><span class="pre">json_array</span></tt>: Type that maps a SQL CLOB to a PHP array using
<tt class="docutils literal"><span class="pre">json_encode()</span></tt> and <tt class="docutils literal"><span class="pre">json_decode()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">float</span></tt>: Type that maps a SQL Float (Double Precision) to a
PHP double. <em>IMPORTANT</em>: Works only with locale settings that use
decimal points as separator.</li>
<li><tt class="docutils literal"><span class="pre">guid</span></tt>: Type that maps a database GUID/UUID to a PHP string. Defaults to
varchar but uses a specific type if the platform supports it.</li>
<li><tt class="docutils literal"><span class="pre">blob</span></tt>: Type that maps a SQL BLOB to a PHP resource stream</li>
</ul>
<p>A cookbook article shows how to define <a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/cookbook/custom-mapping-types.html"><em>your own custom mapping types</em></a>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">DateTime and Object types are compared by reference, not by value. Doctrine
updates this values if the reference changes and therefore behaves as if
these objects are immutable value objects.</p>
</div>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p>All Date types assume that you are exclusively using the default timezone
set by <a class="reference external" href="http://docs.php.net/manual/en/function.date-default-timezone-set.php">date_default_timezone_set()</a>
or by the php.ini configuration <tt class="docutils literal"><span class="pre">date.timezone</span></tt>. Working with
different timezones will cause troubles and unexpected behavior.</p>
<p class="last">If you need specific timezone handling you have to handle this
in your domain, converting all the values back and forth from UTC.
There is also a <a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/cookbook/working-with-datetime.html"><em>cookbook entry</em></a>
on working with datetimes that gives hints for implementing
multi timezone applications.</p>
</div>
</div>
<div class="section" id="identifiers-primary-keys">
<h2>5.5. Identifiers / Primary Keys<a class="headerlink" href="#identifiers-primary-keys" title="Permalink to this headline">¶</a></h2>
<p>Every entity class must have an identifier/primary key. You can select
the field that serves as the identifier with the <tt class="docutils literal"><span class="pre">@Id</span></tt>
annotation.</p>
<div class="configuration-block jsactive clearfix">
<ul style="height: 244px;" class="simple">
<li class="selected"><em><a href="#"></a><a href="#"></a><a href="#">PHP</a></em><div style="display: block; width: 800px;" class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Id @Column(type="integer")</span>
<span class="sd">     * @GeneratedValue</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">XML</a></em><div style="display: none; width: 800px;" class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;doctrine-mapping&gt;</span>
  <span class="nt">&lt;entity</span> <span class="na">name=</span><span class="s">"Message"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;id</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">type=</span><span class="s">"integer"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;generator</span> <span class="na">strategy=</span><span class="s">"AUTO"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/id&gt;</span>
    <span class="c">&lt;!-- --&gt;</span>
  <span class="nt">&lt;/entity&gt;</span>
<span class="nt">&lt;/doctrine-mapping&gt;</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">YAML</a></em><div style="display: none; width: 800px;" class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Message</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
  <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">integer</span>
      <span class="l-Scalar-Plain">generator</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">strategy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">AUTO</span>
  <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
    <span class="c1"># fields here</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p>In most cases using the automatic generator strategy (<tt class="docutils literal"><span class="pre">@GeneratedValue</span></tt>) is
what you want. It defaults to the identifier generation mechanism your current
database vendor prefers: AUTO_INCREMENT with MySQL, SERIAL with PostgreSQL,
Sequences with Oracle and so on.</p>
<div class="section" id="identifier-generation-strategies">
<h3>5.5.1. Identifier Generation Strategies<a class="headerlink" href="#identifier-generation-strategies" title="Permalink to this headline">¶</a></h3>
<p>The previous example showed how to use the default identifier
generation strategy without knowing the underlying database with
the AUTO-detection strategy. It is also possible to specify the
identifier generation strategy more explicitly, which allows you to
make use of some additional features.</p>
<p>Here is the list of possible generation strategies:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">AUTO</span></tt> (default): Tells Doctrine to pick the strategy that is
preferred by the used database platform. The preferred strategies
are IDENTITY for MySQL, SQLite, MsSQL and SQL Anywhere and SEQUENCE
for Oracle and PostgreSQL. This strategy provides full portability.</li>
<li><tt class="docutils literal"><span class="pre">SEQUENCE</span></tt>: Tells Doctrine to use a database sequence for ID
generation. This strategy does currently not provide full
portability. Sequences are supported by Oracle, PostgreSql and
SQL Anywhere.</li>
<li><tt class="docutils literal"><span class="pre">IDENTITY</span></tt>: Tells Doctrine to use special identity columns in
the database that generate a value on insertion of a row. This
strategy does currently not provide full portability and is
supported by the following platforms: MySQL/SQLite/SQL Anywhere
(AUTO_INCREMENT), MSSQL (IDENTITY) and PostgreSQL (SERIAL).</li>
<li><tt class="docutils literal"><span class="pre">TABLE</span></tt>: Tells Doctrine to use a separate table for ID
generation. This strategy provides full portability.
<strong>*This strategy is not yet implemented!*</strong></li>
<li><tt class="docutils literal"><span class="pre">NONE</span></tt>: Tells Doctrine that the identifiers are assigned (and
thus generated) by your code. The assignment must take place before
a new entity is passed to <tt class="docutils literal"><span class="pre">EntityManager#persist</span></tt>. NONE is the
same as leaving off the @GeneratedValue entirely.</li>
</ul>
<div class="section" id="sequence-generator">
<h4>5.5.1.1. Sequence Generator<a class="headerlink" href="#sequence-generator" title="Permalink to this headline">¶</a></h4>
<p>The Sequence Generator can currently be used in conjunction with
Oracle or Postgres and allows some additional configuration options
besides specifying the sequence’s name:</p>
<div class="configuration-block jsactive clearfix">
<ul style="height: 261px;" class="simple">
<li class="selected"><em><a href="#"></a><a href="#"></a><a href="#">PHP</a></em><div style="display: block; width: 800px;" class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Message</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Id</span>
<span class="sd">     * @GeneratedValue(strategy="SEQUENCE")</span>
<span class="sd">     * @SequenceGenerator(sequenceName="message_seq", initialValue=1, allocationSize=100)</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$id</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">XML</a></em><div style="display: none; width: 800px;" class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;doctrine-mapping&gt;</span>
  <span class="nt">&lt;entity</span> <span class="na">name=</span><span class="s">"Message"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;id</span> <span class="na">name=</span><span class="s">"id"</span> <span class="na">type=</span><span class="s">"integer"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;generator</span> <span class="na">strategy=</span><span class="s">"SEQUENCE"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;sequence-generator</span> <span class="na">sequence-name=</span><span class="s">"message_seq"</span> <span class="na">allocation-size=</span><span class="s">"100"</span> <span class="na">initial-value=</span><span class="s">"1"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/id&gt;</span>
  <span class="nt">&lt;/entity&gt;</span>
<span class="nt">&lt;/doctrine-mapping&gt;</span>
</pre></div>
</div>
</li>
<li><em><a href="#"></a><a href="#"></a><a href="#">YAML</a></em><div style="display: none; width: 800px;" class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Message</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity</span>
  <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">integer</span>
      <span class="l-Scalar-Plain">generator</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">strategy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">SEQUENCE</span>
      <span class="l-Scalar-Plain">sequenceGenerator</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">sequenceName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">message_seq</span>
        <span class="l-Scalar-Plain">allocationSize</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
        <span class="l-Scalar-Plain">initialValue</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p>The initial value specifies at which value the sequence should
start.</p>
<p>The allocationSize is a powerful feature to optimize INSERT
performance of Doctrine. The allocationSize specifies by how much
values the sequence is incremented whenever the next value is
retrieved. If this is larger than 1 (one) Doctrine can generate
identifier values for the allocationSizes amount of entities. In
the above example with <tt class="docutils literal"><span class="pre">allocationSize=100</span></tt> Doctrine 2 would only
need to access the sequence once to generate the identifiers for
100 new entities.</p>
<p><em>The default allocationSize for a @SequenceGenerator is currently 10.</em></p>
<div class="admonition caution">
<p class="first admonition-title">Caution</p>
<p class="last">The allocationSize is detected by SchemaTool and
transformed into an “INCREMENT BY ” clause in the CREATE SEQUENCE
statement. For a database schema created manually (and not
SchemaTool) you have to make sure that the allocationSize
configuration option is never larger than the actual sequences
INCREMENT BY value, otherwise you may get duplicate keys.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It is possible to use strategy=”AUTO” and at the same time
specifying a @SequenceGenerator. In such a case, your custom
sequence settings are used in the case where the preferred strategy
of the underlying platform is SEQUENCE, such as for Oracle and
PostgreSQL.</p>
</div>
</div>
</div>
<div class="section" id="composite-keys">
<h3>5.5.2. Composite Keys<a class="headerlink" href="#composite-keys" title="Permalink to this headline">¶</a></h3>
<p>with Doctrine 2 you can use composite primary keys, using <tt class="docutils literal"><span class="pre">@Id</span></tt> on more then
one column. Some restrictions exist opposed to using a single identifier in
this case: The use of the <tt class="docutils literal"><span class="pre">@GeneratedValue</span></tt> annotation is not supported,
which means you can only use composite keys if you generate the primary key
values yourself before calling <tt class="docutils literal"><span class="pre">EntityManager#persist()</span></tt> on the entity.</p>
<p>More details on composite primary keys are discussed in a <a class="reference internal" href="http://doctrine-orm.readthedocs.org/en/latest/tutorials/composite-primary-keys.html"><em>dedicated tutorial</em></a>.</p>
</div>
</div>
<div class="section" id="quoting-reserved-words">
<h2>5.6. Quoting Reserved Words<a class="headerlink" href="#quoting-reserved-words" title="Permalink to this headline">¶</a></h2>
<p>Sometimes it is necessary to quote a column or table name because of reserved
word conflicts. Doctrine does not quote identifiers automatically, because it
leads to more problems than it would solve. Quoting tables and column names
needs to be done explicitly using ticks in the definition.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="sd">/** @Column(name="`number`", type="integer") */</span>
<span class="k">private</span> <span class="nv">$number</span><span class="p">;</span>
</pre></div>
</div>
<p>Doctrine will then quote this column name in all SQL statements
according to the used database platform.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Identifier Quoting does not work for join column names or discriminator
column names unless you are using a custom <tt class="docutils literal"><span class="pre">QuoteStrategy</span></tt>.</p>
</div>
<span class="target" id="reference-basic-mapping-custom-mapping-types"></span><p>For more control over column quoting the <tt class="docutils literal"><span class="pre">Doctrine\ORM\Mapping\QuoteStrategy</span></tt> interface
was introduced in 2.3. It is invoked for every column, table, alias and other
SQL names. You can implement the QuoteStrategy and set it by calling
<tt class="docutils literal"><span class="pre">Doctrine\ORM\Configuration#setQuoteStrategy()</span></tt>.</p>
<p>The ANSI Quote Strategy was added, which assumes quoting is not necessary for any SQL name.
You can use it with the following code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping\AnsiQuoteStrategy</span><span class="p">;</span>

<span class="nv">$configuration</span><span class="o">-&gt;</span><span class="na">setQuoteStrategy</span><span class="p">(</span><span class="k">new</span> <span class="nx">AnsiQuoteStrategy</span><span class="p">());</span>
</pre></div>
</div>
</div>
</div>


              </div>
                </div>

            </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
             
                <h3>Project Versions</h3>

                <select name="versions" id="versions">
            
            <option selected="selected" value="http://readthedocs.org/en/latest/">latest</option>
            
            <option value="http://readthedocs.org/en/stable/">stable</option>
            
                </select>
            
            <div id="searchbox" style="">
              <h3>Search</h3>
                <form class="search" action="http://readthedocs.org/search/project/" method="get">
                  <input name="q" size="18" type="text">
                  <input value="Go" type="submit">
                  <input name="selected_facets" value="project:Doctrine ORM" type="hidden">
                </form>
            </div>
            <h3><a href="http://doctrine-orm.readthedocs.org/en/latest/index.html">Table Of Contents</a></h3>
            <ul>
<li><a class="reference internal" href="#">5. Basic Mapping</a><ul>
<li><a class="reference internal" href="#guide-assumptions">5.1. Guide Assumptions</a></li>
<li><a class="reference internal" href="#creating-classes-for-the-database">5.2. Creating Classes for the Database</a></li>
<li><a class="reference internal" href="#property-mapping">5.3. Property Mapping</a></li>
<li><a class="reference internal" href="#doctrine-mapping-types">5.4. Doctrine Mapping Types</a></li>
<li><a class="reference internal" href="#identifiers-primary-keys">5.5. Identifiers / Primary Keys</a><ul>
<li><a class="reference internal" href="#identifier-generation-strategies">5.5.1. Identifier Generation Strategies</a><ul>
<li><a class="reference internal" href="#sequence-generator">5.5.1.1. Sequence Generator</a></li>
</ul>
</li>
<li><a class="reference internal" href="#composite-keys">5.5.2. Composite Keys</a></li>
</ul>
</li>
<li><a class="reference internal" href="#quoting-reserved-words">5.6. Quoting Reserved Words</a></li>
</ul>
</li>
</ul>

            <h4>Previous topic</h4>
            <p class="topless"><a href="http://doctrine-orm.readthedocs.org/en/latest/reference/faq.html" title="previous chapter">4. Frequently Asked Questions</a></p>
            <h4>Next topic</h4>
            <p class="topless"><a href="http://doctrine-orm.readthedocs.org/en/latest/reference/association-mapping.html" title="next chapter">6. Association Mapping</a></p>
            <h3>This Page</h3>
            <ul class="this-page-menu">
              <li><a href="http://doctrine-orm.readthedocs.org/en/latest/_sources/reference/basic-mapping.txt" rel="nofollow">Show Source</a></li>
            </ul>
        </div>
      </div>
          <div class="clearer"></div>
        </div>
          <div class="footer">
              © Copyright 2010-12, Doctrine Project Team.
              Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.2.2.
            <br>
            <a target="_BLANK" href="http://www.servergrove.com/"><img src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/servergrove.jpg"></a>      <br><br>
            <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
              <input name="cmd" value="_s-xclick" type="hidden">
              <input name="hosted_button_id" value="BAE2E3XANQ77Y" type="hidden">
              <input src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/btn_donateCC_LG.gif" name="submit" alt="PayPal - The safer, easier way to pay online!" border="0" type="image">
              <img alt="" src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/pixel.gif" border="0" height="1" width="1">
            </form>
          </div>
      </div>

      <div id="bot-rcnr">
        <div class="tl"><!-- corner --></div>
      </div>
    </div>

  <script src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/urchin.js" type="text/javascript">
  </script>
  <script type="text/javascript">
  _uacct = "UA-288343-7";
  urchinTracker();
  </script>
  <a class="githublink" href="http://github.com/doctrine"><img src="5.%20Basic%20Mapping%20%E2%80%94%20Doctrine%202%20ORM%202%20documentation_files/forkme_right_orange_ff7600.png" alt="Fork me on GitHub"></a>
  
</body></html>